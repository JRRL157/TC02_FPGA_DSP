
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Default(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
   //////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
	
);

	wire [7:0] hex0_w, hex1_w, hex2_w, hex3_w, hex4_w, hex5_w;
	wire [1:0] slw_clk_w;
	wire [3:0] A, B;
	wire [7:0] res;
	wire [3:0] state;

	KEY_INC mod_key0(.clk(MAX10_CLK1_50), .key_btn(KEY[0]), .reset(SW[0]), .slow_clk(slw_clk_w[0]), .out_cnt(A));
	KEY_INC mod_key1(.clk(MAX10_CLK1_50), .key_btn(KEY[1]), .reset(SW[0]), .slow_clk(slw_clk_w[1]), .out_cnt(B));

	SEG7_LUT d0(.in(A), .dot(1'b0), .out(hex0_w));
	SEG7_LUT d1(.in(B), .dot(1'b0), .out(hex1_w));
	SEG7_LUT d2(.in(state), .dot(1'b1), .out(hex2_w));
	SEG7_LUT d4(.in(res[3:0]), .dot(1'b1), .out(hex4_w));
	SEG7_LUT d5(.in(res[7:4]), .dot(1'b0), .out(hex5_w));


	four_bit_multiplier mult(.clk(MAX10_CLK1_50), .rst(SW[0]), .ena(SW[9]), .A(A), .B(B), .Y(res), .done(LEDR[8]), .state(state));
	
	assign HEX0 = hex0_w;
	assign HEX1 = hex1_w;
	assign HEX2 = hex2_w;
	assign HEX3 = 8'hFF;
	assign HEX4 = hex4_w;
	assign HEX5 = hex5_w;
	
	assign LEDR[7:0] = res;
	assign LEDR[9] = SW[9];

endmodule
